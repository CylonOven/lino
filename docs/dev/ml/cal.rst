========
Calendar
========

.. module:: ml.cal

The :mod:`lino.modlib.cal` package 
provides data definitions for "Calendar management".

.. contents:: 
   :local:
   :depth: 2


Models
======


.. class:: Event

  A Calendar Event (french "Rendez-vous", german "Termin") is a
  planned ("scheduled") lapse of time where something happens.

  .. attribute:: user

     The responsible user.

  .. attribute:: assigned_to

    This field is usually empty.  Setting it to another user means "I
    am not fully responsible for this event".  This will cause the
    other user to see this event in his :class:`MyAssignedEvents`
    table.

    This field is cleared when somebody calls :class:`TakeEvent` on
    the event.

  .. attribute:: type

     The type of this event. Every calendar event should have this
     field pointing to a given :class:`EventType`, which holds
     extended configurable information about this event.


.. class:: EventType

    The possible value of the :attr:`Event.type` field.

    Example content:

    .. lino2rst::

       dd.login('robin').show(cal.EventTypes, limit=5)


.. class:: Task

    A Task is when a user plans to to something 
    (and optionally wants to get reminded about it).

    .. attribute:: state
     
        The state of this Task. one of :class:`TaskStates`

.. class:: RecurrentEvent

    An event that recurs at intervals.

.. class:: RecurrentEvents

    The list of all recurrent events (:class:`RecurrentEvent`).


Mixins
======



.. class:: Started

  .. attribute:: start_date
  .. attribute:: start_time

  .. method:: set_datetime(self, name, value)

    Given a datetime `value`, update the two corresponding fields
    `FOO_date` and `FOO_time` (where FOO is specified in `name` which
    must be either "start" or "end").

  .. method:: get_datetime(self, name, altname=None)

    Return a `datetime` value from the two corresponding
    date and time fields.

    `name` can be 'start' or 'end'.





.. class:: RecurrenceSet(Started, Ended)

    Abstract base for models that express a set of recurrency
    rules. This might be combined with :class:`EventGenerator` into a
    same model as done by :class:`Reservation`.

    Thanks to http://www.kanzaki.com/docs/ical/rdate.html


  .. method:: times_text(self, ar)
  .. method:: weekdays_text(self, ar)

  This is a virtual field labelled "When".

  .. method:: move_event_to(self, ev, newdate)

    Move given event to a new date.
    Also change `end_date` if necessary.

  .. method:: get_next_alt_date(self, ar, date)

     Currently always returns date + 1.

  .. method:: get_next_suggested_date(self, ar, date)

    Find the next date after the given date, without worrying about
    conflicts.

  .. method:: find_start_date(self, date)

    Find the first available date for the given date (possibly
    including that date)

  .. method:: is_available_on(self, date)

    Whether the given date `date` is allowed according to the weekdays
    of this recurrence set.




.. class:: EventGenerator

    Base class for things that generate a suite of events.

    The generated events are "controlled" by their generator (their
    `owner` field points to the generator) and have a non-empty
    `auto_type` field.

    Examples:

    - :class:`Reservation` (subclassed by
      :class:`lino.modlib.courses.Course`)

- :class:`lino_welfare.modlib.isip.Contract` and
  :class:`lino_welfare.modlib.jobs.Contract` are event generators
  with a separate

  .. method:: get_registrable_fields(cls, site)
  .. method:: delete(self)

    Delete all events generated by me before deleting myself.

  .. method:: update_cal_rset(self)
  .. method:: update_cal_from(self, ar)

    Return the date of the first Event to be generated.
    Return None if no Events should be generated.

  .. method:: update_cal_until(self)

    Return the limit date until which to generate events.  None means
    "no limit" (which de facto becomes :attr:`ad.Site.ignore_dates_after`)

  .. method:: update_cal_calendar(self)

    Return the event_type for the events to generate.  Returning None
    means: don't generate any events.

  .. method:: get_events_language(self)

    Return the language to activate while events are being generated.

  .. method:: update_cal_room(self, i)
  .. method:: update_cal_summary(self, i)
  .. method:: update_reminders(self, ar)
  .. method:: update_auto_events(self, ar)

    Generate automatic calendar events owned by this contract.

    If one event has been manually rescheduled, all following
    events adapt to the new rythm.


  .. method:: compare_auto_event(self, obj, ae)

  .. method:: before_auto_event_save(self, obj)

    Called for automatically generated events after their automatic
    fields have been set and before the event is saved.
    This allows for application-specific "additional-automatic" fields.
    E.g. the room field in `lino.modlib.courses`

    **Automatic event fields**:
    :class:`EventGenerator`
    by default manages the following fields:

    - auto_type
    - user
    - summary
    - start_date, start_time
    - end_date, end_time



  .. method:: get_wanted_auto_events(self, ar)

    Return a dict which maps sequence number
    to AttrDict instances which hold the wanted event.

  .. method:: move_event_next(self, we, ar)

    Move the specified event to the next date in this series.
    
  .. method:: resolve_conflicts(self, we, ar, rset, until)

    Check whether given event conflicts with other events and move it
    to a new date if necessary. Returns the new date, or None if
    no alternative could be found.


  .. method:: get_existing_auto_events(self)



.. class:: Reservation

    Base class for :class:`rooms.Booking` and :class:`courses.Course`.

    Inherits from both :class:`EventGenerator` and :class:`RecurrenceSet`.

  .. attribute:: room
  .. attribute:: max_date

Choicelists
===========


.. class:: EventStates

    Possible values for the state of a task. The list of choices for
    the :attr:`Event.state` field. By default it contains the following
    values (which can be redefined in :meth:`ad.Site.setup_choicelists`):

    .. django2rst:: 

            dd.show(cal.EventStates)


.. class:: TaskStates

    Possible values for the state of a task. The list of choices for
    the :attr:`Task.state` field. By default it contains the following
    values (which can be redefined in :meth:`ad.Site.setup_choicelists`):

    .. django2rst:: 

            dd.show(cal.TaskStates)


.. class:: GuestStates

    Possible values for the state of a Guest. The list of choices for
    the :attr:`Guest.state` field. By default it contains the following
    values (which can be redefined in :meth:`ad.Site.setup_choicelists`):

    .. django2rst:: 

            dd.show(cal.GuestStates)



Tables
======

.. class:: Events

  Table which shows all calendar events. 

.. class:: MyAssignedEvents

  The table of events which are *assigned* to me. That is, whose
  :attr:`Event.assigned_to` field refers to the requesting user.

  This table also causes a :term:`welcome message` "X events have been
  assigned to you" in case it is not empty.

.. class:: MyEvents

  Table which shows today's and future calendar events of the
  requesting user.


Actions
=======

.. |flag_green| image:: ../../../lino/media/extjs/images/mjames/flag_green.png
  
.. class:: TakeEvent

    Represented by a green flag (|flag_green|) button.

    This action means that you declare to become the fully responsible
    user for this event.  Accordingly, this action is available only
    when you are not already fully responsible. You are fully
    responsible when (1) :attr:`Event.user` is set to *you*
    **and** (2) :attr:`Event.assigned_to` is *not empty*.

    Basically anybody can take any event, even if it is not assigned
    to them.



