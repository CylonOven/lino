=============================
Lino and your Django settings
=============================

This section explains some basic things about your Django settings and
Lino.

.. _settings:

Django settings module
======================

The **Django settings module** is the most important thing in Django.
Almost everything you do with Django requires the settings module to
be loaded. Django does that automatically, but needs to know where it
is. You can specify this either using the
:envvar:`DJANGO_SETTINGS_MODULE` environment variable or the
`--settings` command-line option of certain management commands.

It must be importable. That is, if it contains e.g. ``foo.bar.baz``,
then Django will do an equivalent of ``import foo.bar.baz`` before it
is able to do anything else.

See also :doc:`/admin/settings`.

.. envvar:: DJANGO_SETTINGS_MODULE
  
The :envvar:`DJANGO_SETTINGS_MODULE` environment variable is expected
to contain the *Python name* of the `Django settings module`_. 

.. xfile:: settings.py

When we speak about "the :xfile:`settings.py` file", then we actually
mean the `Django settings module`_.  That's because the filename of a
Django settings module is often in a file named :xfile:`settings.py`.
But in reality it can be some arbitrary filename.




How Lino integrates into Django settings
========================================

Here is a typical :xfile:`settings.py` file of a Lino project::

  from foo.bar.settings import *
  SITE = Site(globals())
  # ... your local settings here

That is, you import the content of some existing Lino project into
your local settings module and then define a :setting:`SITE` variable.

.. setting:: SITE

Lino expects one important variable in your :xfile:`settings.py` file.
It must be named :setting:`SITE`, and it must contain an instance of
the :class:`lino.core.site.Site` class (or --more often-- some
subclass thereof).  This :setting:`SITE` setting is what turns your
Django project into a Lino application.

Inheriting settings
===================

Lino helps you to keep :xfile:`settings.py` files small because it
delegates the responsibility of maintaining default values for Django
settings to the application developer.

The typical local :xfile:`settings.py` file for a Lino project
consists of two lines (plus, on a production site, the lines for
defining your :setting:`DATABASES` setting). Compare this to a
:file:`settings.py` file generated by Django's `startproject` command
which contains already 82 lines of text (Django version 1.6.9).


.. _djangosite_local:

The ``djangosite_local.py`` file
================================

The :ref:`djangosite_local.py <djangosite_local>` file is another
technique which Lino adds to plain Django.

When a :class:`lino.core.site.Site` gets instantiated, it will try to
import an module named ``djangosite_local``, and if that module exists
and has a function named ``setup_site``, Lino will call this function.

This mechanism is used on servers where many Lino sites are running to
provide local server-wide default settings.
