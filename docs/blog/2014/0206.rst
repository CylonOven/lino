=====================================
20140206 (Thursday, 06 February 2014)
=====================================

Release for Roger
-----------------

Yesterday evening I announced a release of :ref:`faggio` for Roger,
but I had to postpone this because there were quite a lot of
last-minute surprises:

- `How to use git for stepping back?`_

- :mod:`lino_faggio.migrate` wasn't yet ready.

- Yet another thing which indicates that `set_detail_tab` is not good:
  there was a problem with the `vat_id` field of a company. Last week
  I had moved this field to `Partner`, during migration I noticed that
  this was a wrong decision, the field must remain in
  `contacts.Company`. It took me quite some time to find where this
  field was being added to the contacts.PartnerDetail. Now I use a
  `sales.PartnerDetailMixin`. This also solves the problem of ordering
  of the PartnerDetail tabs in :ref:`faggio`: sales should come before
  ledger although logically (technically) it is the opposite.

- `ComboBox and the TAB key`_


How to use git for stepping back?
---------------------------------

On a production site I have a `repositories` directory whith 5 git
clones: atelier, djangosite, north, lino and lino_faggio. I wrote a
script called "pull" which does a ``git pull`` all those 5
directories.  But what if I don't like the new version and want to
step back?  How should I organize my upgrade so that I can step back
to the revision that were master at a certain timestamp?


repositories/lino ::

    $ git log 
    commit 3e501c9d6bd4150681abce6ad0f7f323a05113dd
    Author: Luc Saffre <luc.saffre@gmail.com>
    Date:   Tue Dec 10 21:06:44 2013 +0200

        http://docs.lino-framework.org/blog/2013/1210.html

    commit a300827274f59f5eb07964e741319889f87dd6e6
    Author: Luc Saffre <luc.saffre@gmail.com>
    Date:   Tue Dec 10 08:35:28 2013 +0200

        http://docs.lino-framework.org/blog/2013/1210.html


repositories/lino-faggio ::


    commit bc0697447443c50987503c5820f82f8aca77dfae
    Author: Luc Saffre <luc.saffre@gmail.com>
    Date:   Tue Dec 10 21:06:56 2013 +0200

        http://docs.lino-framework.org/blog/2013/1210.html

    commit 823431e30e3ea477bebad473eaabdc36a23e0af0
    Author: Luc Saffre <luc.saffre@gmail.com>
    Date:   Tue Dec 10 14:41:20 2013 +0200

        http://docs.lino-framework.org/blog/2013/1210.html

repositories/north::

    commit 3767b78ca3edc94ef7b1572c17dc44fffb316cfa
    Author: Luc Saffre <luc.saffre@gmail.com>
    Date:   Thu Dec 5 19:09:25 2013 +0200

        http://docs.lino-framework.org/blog/2013/1205.html


Enter, Ctrl-Enter and Ctrl-S
----------------------------

I start to understand more about our Ctrl-Enter/Enter problem. Having
ENTER bound to save() is indeed necessary within FormPanels used for
insert actions. So I decided to take Joe's approach (instead of mine)
as a quick workaround before solving the problem more deeply (I'd like
to add a "Insert and add new record" button to the InsertFormPanels,
and also make the set of available insert submit buttons configurable
per model or actor)

But with Joe's solution I get a JavaScript error:

  TypeError: e.target is undefined

After inspecting `ext-all-debug.js` I found that my version of ExtJS
passes two arguments (key, event) to the handler function, so only the
following variant of Joe's solution works for me::

      fn: function(k, e) {
          if(e.target.type === 'textarea' && !e.ctrlKey) {
              return true;
          }
          this.on_ok();
      }

I verified that both ExtJS 3.3.1, and ExtJS 3.4 officially do it like
this:

    it will call the function with this signature (...): (String key,
    Ext.EventObject e)

    (http://docs.sencha.com/extjs/3.4.0/#!/api/Ext.KeyMap)


ComboBox and the :kbd:`TAB` key
-------------------------------

Cool! I managed to fix another old problem for keyboard users:

When entering data into a FormPanel using the keyboard, then I
recommend to use the :kbd:`TAB` key for skipping to the next input
field. But Lino until now had a strange behaviour: in order to select
a value from a ComboBox using the keyboard you must first hit
:kbd:`RET`. Pressing :kbd:`TAB` will *restore* the previous value! As
if you had typed :kbd:`ESC`!

This is related to a strange piece of code in
`Ext.form.ComboBox.initEvents`::

    this.keyNav = new Ext.KeyNav(this.el, {
        (...)
        "enter" : function(e){ this.onViewClick(); },
        "esc" : function(e){ this.collapse(); },
        "tab" : function(e){
            if (this.forceSelection === true) {
                this.collapse();
            } else {
                this.onViewClick(false);
            }
            return true;
        },

`ComboBox.forceSelection` is "``true`` to restrict the selected value
to one of the values in the list, false to allow the user to set
arbitrary text into the field" (quote from the docs). And this is an
important feature. Lino manages this option automatically: it is
usually set to `false`, except for :ref:`learning_combos`.

I don't understand why the ExtJS authors decided to give to
`forceSelection` option this surprising side-effect.

But then I discovered that the test is done here for the exact `true`
value (using the triple equal sign `===`), while at the place where it
really matters, they just test for the boolean equivalent::

        if(!rec && this.forceSelection){

I don't know whether this was intended, but it suits me very well: I
can now set `forceSelection` to some non-empty text and voil√†:
`forceSelection` is enabled, but :kbd`TAB` now selects the value
before jumping to the next field.
