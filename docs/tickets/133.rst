#133 : Lebensläufe und Historie
===============================

Auslöser: Wir wollten einen Lebenslauf erstellen und das manuelle
Bearbeiten/Speichern testen.  :ref:`davlink` aber funktionierte nicht,
weil der Java client nicht richtig konfiguriert war.  Aber bis wir das
gefunden hatten, hatte der Drucker-Button bei jedem Versuch
klammheimlich einen neuen Auszug erstellt.  Ausserdem wurde
möglicherweise das Panel "Historie" nicht automatisch aktualisiert.

DONE:

#.  Nach Erstellen eines Ausdrucks Meldung, dass das erstellte
    Dokument sich nun öffnen müsste.

    Und im Lino Welfare à la Eupen funktioniert sogar der Link zur
    `Dokumentation
    <http://de.welfare.lino-framework.org/help/print.html>`__ in
    dieser Meldung.  This link is a first usage example of the new
    function :method:`rt.ActionRequest.get_help_url`.


TODO:
    
#.  Im Feld :class:`"Auszüge" <ml.excerpts.ExcerptsByProject>` (im
    Reiter "Historie"):

    - Zusammenfassung muss intuitiv übersichtlicher werden: Gruppieren
      pro Datum.  Fehlgeschlagene Auszüge (mit leerem Feld
      `build_date`) an erster Stelle erwähnen.

    - Filtern können wenn im eigenen Fenster. Nach Dokumentart, nach
      Datumsbereich, nach Benutzer.
 
    - Wird dieses Panel automatisch aktualisiert nach einem Ausdruck?

#.  Und irgendwann kommt sogar eine nächtliche Routine, die alle
    ungedruckten Auszüge löscht. Denn ein ungedruckter Auszug
    ist --abgesehen für die eventuelle Fehlerdiagnose--
    unsinnig. (Oder?)

#.  Im Reiter "Lebenslauf" einen Link zum letzten Lebenslauf oder zur
    Tabelle aller erstellten Lebensläufe?

    Nebenidee: Nicht nur für Lebenslauf, sondern allgemein ein
    virtuelles Feld `recent_excerpts` für :class:`dd.Model`?  Nein,
    das wäre dann ja inhaltlich das Gleiche wie die zusammengefasste
    Historie.

    Die Implementierung dieser Idee ist subtil:

    First idea is to a new field `vfield_name` on
    :class:`ml.excerpts.ExcerptType` and then extend
    :func:`ml.excerpts.set_excerpts_actions` to install a virtual
    field on the model for these types.  But that approach would
    result in layouts based on database content.  Sounds dangerous and
    hackerish.

    Solution is to define a new choicelist `ExcerptShortcuts` and to
    add a field `shortcut` :class:`ml.excerpts.ExcerptType` which
    points to this choicelist.

    In :mod:`lino_welfare.modlib.pcsw` we would do for example::

      ExcerptShortcuts.add('pcsw.Client', 'cv')

    And then :func:`ml.excerpts.set_excerpts_actions` would define the
    virtual fields::

      for i in ExcerptShortcuts.items():
          def f(obj, ar):
              try:
                  et = ExcerptType.objects.get(shortcut=i.name)
              except DoesNotExist:
                  return ''
              qs = Excerpt.objects.filter(owner=obj, excerpt_type=et)
              ...
          dd.inject_field(i.model, i.name, f)


Noch zu besprechen:

#.  E-Mail-Ausgänge (:class:`ml.outbox.MailsByOwner`) auch ins Detail
    eines Auszugs.

#.  Auszugsarten anlegen fürs Modell `notes.Note`: Aktennotiz, Brief,
    E-Mail. Gibt es bestehende Notizen mit manuell bearbeiteten
    printables?

#. "Ereignisse/Notizen" umbenennen nach "Notizen".

    Aber wie schreibt man dann einen Standardbrief und/oder eine E-Mail
    an jemanden? Antwort: wie bisher. Man schreibt eine Notiz und druckt
    sie dann aus.

    Die Notizarten "E-Mail", "Brief" und "Einschreiben" bedeuten
    (weiterhin), dass ich als Benutzer ein freies Dokument selber
    aufsetze mit dem Ziel, es auszudrucken und/oder an den Klienten oder
    externe Partner zu verschicken.

#.  Zugriffsrechte pro Dokumentart? Z.B. Lebenslauf darf nicht jeder
    sehen.
