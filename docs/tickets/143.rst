#143 : Add a `Table.start_at_bottom` option
===========================================

Set this to `True` if you want your table to *start at the bottom*.

Unlike reverse ordering, the rows remain in their natural order, but
we want to see the last page at first when we open a grid on this
table.

The number of the last page depends on the number of rows per page,
which is known only when the table has been rendered on screen.

I tried a pure server-side solution where the user interface is not
aware of this setting, i.e. page 1 means "the last page", page 2 means
"the page before the last page" and so on.  This solution, while
easier to implement, was not usable because the paging behaviour
became intuitively "wrong".  I also considered negative page numbers
which might be less irritating, but the `PagingToolbar` does not
support negative page numbers, and it would be difficult to change
that.
    
So the solution must be client-side, i.e. in 
:xfile:`linoweb.js`.
    
`Table.start_at_bottom` is just as if we had an automatic click to the
`moveLast()` method of the `PagingToolbar` when the grid has been
displayed.

:xfile:`linoweb.js` translates the paging state into the parameters
`URL_PARAM_START` and `URL_PARAM_LIMIT` of the AJAX request.

The `cursor
<http://docs.sencha.com/extjs/3.4.0/#!/api/Ext.PagingToolbar-property-cursor>`_
property of the `Ext.PagingToolbar` indicates the "record position",
i.e. the equivalent of the SQL `offset` clause.  If there is no
toolbar (e.g. in a slave table), then it is 0.
Its AJAX equivalent is `URL_PARAM_START`.

The `pageSize
<http://docs.sencha.com/extjs/3.4.0/#!/api/Ext.PagingToolbar-property-pageSize>`_
property of the `Ext.PagingToolbar` is dynamically calculated when the
grid has been rendered.  It is the SQL `limit` clause and the
`URL_PARAM_LIMIT` of the AJAX request.
